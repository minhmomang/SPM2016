package Helper;

import java.io.IOException;
import java.io.StringWriter;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;

import org.codehaus.jackson.JsonGenerationException;
import org.codehaus.jackson.map.JsonMappingException;
import org.codehaus.jackson.map.ObjectMapper;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.gson.Gson;


public class JsonHelper {

	public static String ConvertListObjectToJson(ArrayList<Object> list) throws JSONException{
		String jsontext = null;
		try{
			JSONArray arr = new JSONArray(list);
			StringWriter out = new StringWriter();
			arr.write(out);
			jsontext = out.toString();			
		}catch(Exception ex){
			System.out.println("===>JsonHelper=>ConvertListObjectToJson:"+ex.getMessage());
		}
		return jsontext;	
	}
	public static String ConvetJSONObjectToJson(JSONObject obj){
		String jsontext = null;
		try{
			StringWriter out = new StringWriter();
			obj.write(out);	
			jsontext = out.toString();
		}catch(Exception ex){
			System.out.println("===>JsonHelper=>ConvetJSONObjectToJson:"+ex.getMessage());
		}
		return jsontext;	
	}
	public static String ConvertObjectToJson(Object obj) throws JsonGenerationException, JsonMappingException, IOException{
		org.codehaus.jackson.map.ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
		String json = ow.writeValueAsString(obj);
		return json;
	}

	public static String ConvertResulttoJSON(ResultSet rs) throws SQLException, IOException {
	
	    ResultSetMetaData rsmd = rs.getMetaData();
	    int count = rsmd.getColumnCount();
	    ArrayList<String> record = new ArrayList<String>();
	    ArrayList<ArrayList<String>> recordSet = new ArrayList<ArrayList<String>>();    
	    for(int idx=1; idx<=count; idx++) {
	         record.add(rsmd.getColumnLabel(idx));
	    }
	    recordSet.add(record);
	    while(rs.next()) {       
	       for(int idx=1; idx<=count; idx++) {
	         record.add(rs.getString(idx));
	       }
	       recordSet.add(record);
	    }
	    rs.close();
	    Gson gson = new Gson();
	    return gson.toJson(recordSet);
	}
	public static String ConvertResulttoJSON2(ResultSet resultSet)
            throws Exception {
        JSONArray jsonArray = new JSONArray();
        while (resultSet.next()) {
            int total_rows = resultSet.getMetaData().getColumnCount();
            JSONObject obj = new JSONObject();
            for (int i = 0; i < total_rows; i++) {
                obj.put(resultSet.getMetaData().getColumnLabel(i + 1)
                        .toLowerCase(), resultSet.getObject(i + 1));
            }
            jsonArray.put(obj);
        }
        Gson gson = new Gson();
        String jsontext = gson.toJson(jsonArray);
        return jsontext;
    }
	public static String ConvertArraytoJSON(String[][] data,int col,int row,String[]header)
            throws Exception {
        JSONArray jsonArray = new JSONArray();
        for(int i=1;i<row;i++)
		{
        	 JSONObject obj = new JSONObject();
			for(int j=0;j<col;j++)
			{
				obj.put(header[j].toLowerCase(),data[i][j]);				
			}
			 jsonArray.put(obj);
		}        
        Gson gson = new Gson();
        String jsontext = gson.toJson(jsonArray);
        return jsontext;
    }
		
}
